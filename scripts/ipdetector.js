#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');

/**
 * IP Detector Script for Automatic Network Configuration
 * This script automatically detects the local IP address and updates API configurations
 */

function getLocalIPAddress() {
  const interfaces = os.networkInterfaces();
  
  // Priority order for network interfaces (most reliable first)
  const priorityOrder = ['en0', 'wlan0', 'eth0', 'Wi-Fi', 'Ethernet'];
  
  // First, try priority interfaces
  for (const interfaceName of priorityOrder) {
    if (interfaces[interfaceName]) {
      for (const iface of interfaces[interfaceName]) {
        if (iface.family === 'IPv4' && !iface.internal) {
          console.log(`‚úÖ Found IP on ${interfaceName}: ${iface.address}`);
          return iface.address;
        }
      }
    }
  }
  
  // Fallback: check all interfaces
  for (const interfaceName in interfaces) {
    for (const iface of interfaces[interfaceName]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        console.log(`‚úÖ Found IP on ${interfaceName}: ${iface.address}`);
        return iface.address;
      }
    }
  }
  
  console.log('‚ùå No suitable IP address found, using localhost');
  return '127.0.0.1';
}

function updateApiConfig(ipAddress) {
  const configFiles = [
    path.join(__dirname, '../src/store/authApi.ts'),
    path.join(__dirname, '../src/store/usersApi.ts'),
    path.join(__dirname, '../src/store/streamsApi.ts'),
    path.join(__dirname, '../src/store/followApi.ts'),
    path.join(__dirname, '../src/store/messagingApi.ts')
  ];
  
  const baseUrl = `http://${ipAddress}:8000`;
  console.log(`üîÑ Updating API base URL to: ${baseUrl}`);
  
  configFiles.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      try {
        let content = fs.readFileSync(filePath, 'utf8');
        
        // Replace various IP patterns
        const patterns = [
          /http:\/\/\d+\.\d+\.\d+\.\d+:8000/g,
          /http:\/\/localhost:8000/g,
          /http:\/\/127\.0\.0\.1:8000/g,
          /http:\/\/192\.168\.\d+\.\d+:8000/g,
          /http:\/\/172\.\d+\.\d+\.\d+:8000/g,
          /http:\/\/10\.\d+\.\d+\.\d+:8000/g
        ];
        
        let updated = false;
        patterns.forEach(pattern => {
          if (pattern.test(content)) {
            content = content.replace(pattern, baseUrl);
            updated = true;
          }
        });
        
        if (updated) {
          fs.writeFileSync(filePath, content);
          console.log(`‚úÖ Updated: ${path.basename(filePath)}`);
        } else {
          console.log(`‚ÑπÔ∏è  No updates needed: ${path.basename(filePath)}`);
        }
      } catch (error) {
        console.error(`‚ùå Error updating ${filePath}:`, error.message);
      }
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${filePath}`);
    }
  });
}

function createEnvFile(ipAddress) {
  const envPath = path.join(__dirname, '../.env');
  const envContent = `# Auto-generated by IP detector script
EXPO_PUBLIC_API_BASE_URL=http://${ipAddress}:8000
EXPO_PUBLIC_WS_BASE_URL=ws://${ipAddress}:8000
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log(`‚úÖ Created/Updated .env file with IP: ${ipAddress}`);
}

// Main execution
console.log('üîç Detecting local IP address...');
const localIP = getLocalIPAddress();

console.log(`üì± Local IP detected: ${localIP}`);

// Update API configurations
updateApiConfig(localIP);

// Create/update .env file
createEnvFile(localIP);

console.log('‚úÖ IP detection and configuration update completed!');
console.log(`üöÄ Your API base URL is now: http://${localIP}:8000`);
console.log('üîÑ Please restart your Expo development server for changes to take effect.');
